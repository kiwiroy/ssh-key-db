#!/usr/bin/env perl

# DEVELOPERS: read maint/build.sh
# __FATPACK__


use Applify;
use Mojo::Base -base;
use Mojo::ByteStream;
use Mojo::Collection 'c';
use Mojo::File;
use Mojo::Asset::Memory;
use Mojo::Loader qw{data_section};
use Mojo::Template;
use SSH::PublicKey;

extends 'Mojo::Base';

documentation __FILE__;

version $SSH::PublicKey::VERSION;

sub key_files { shift->key_dir->list()->grep(qr/\.authorized_keys$/); }

option dir  => key_dir => 'where to find *.authorized_keys files', default => '.', isa => 'Mojo::File';

# create
subcommand add => 'add a public key' => sub {
    option file => public_key => 'path to public key file', required => 1, isa => 'Mojo::File';
    option str  => username   => 'user name - generates file name', required => 1;
    option file => command    => 'path to command', required => 1, isa => 'Mojo::File';
    option str  => allowed    => 'commands allowed', n_of => '@', required => 1;
    option str  => reason     => q{raison d'etre - used for comments}, required => 1;
    option flag => unique     => 'check public key is unique', default => 1;
};

sub command_add {
    my ($self) = @_;

    my $key = SSH::PublicKey->new(val => $self->public_key->slurp)
        ->command(sprintf '%s %s', $self->command, join ' ', @{$self->allowed})
        ->comment(sprintf 'passphraseless key `%s`', $self->reason)
        ->no_pty(1)->no_port_forwarding(1)->no_X11_forwarding(1)
        ->no_agent_forwarding(1);
    my $file_content = $key->render();

    if ($self->unique) {
        my $matches = $self->_fetch_by_public_key($key);
        my $file = $self->public_key;
        $matches->each(sub { say STDERR "$file matches $_"; });
        return 1 if $matches->size > 0;
    }

    my $output = $self->key_dir
        ->child($self->_generate_filename)
        ->spurt($file_content);
    say "added: $output";
    return 0;
}

# read
subcommand list => 'list files based on a predicate' => sub {
    option file => public_key => 'path to public key file', isa => 'Mojo::File';
    option str  => username   => q{read all of a user's keys};
};

sub command_list {
    my $self = shift;
    my $results = c();
    if ($self->public_key) {
        my $query = SSH::PublicKey->new(val => $self->public_key->slurp);
        push @$results, $self->_fetch_by_public_key($query)->each;
    }
    if (my $user = $self->username) {
        push @$results, $self->_fetch_by_user($user)->each;
    }
    if (0 == @$results and not $self->username and not $self->public_key) {
        push @$results, $self->key_files->each;
    }
    $results->uniq(sub { $_->to_string })->each(
        sub {
            my $key = SSH::PublicKey->new(val => $_->slurp);
            my ($user, $reason) = split(/\./, $_->basename);
            say "filename: $_"; say "user: $user"; say "reason: $reason";
            say "command: ", $key->command; say "key: ", $key->key;
            say "type: ", $key->type;
            say "*" x 80;
        });
    return 0;
}

# update
subcommand update => 'update a record' => sub {
    option file => public_key => 'path to public key file', required => 1, isa => 'Mojo::File';
    option str  => allowed    => 'commands allowed', n_of => '@';
    option file => command    => 'path to command', isa => 'Mojo::File';
    option str  => reason     => q{raison d'etre - used for comments}, required => 1;
    option str  => username   => q{change ownership};
};

# update table set column = value where public_key = ?
sub command_update {
    my ($self, $updated) = (shift);

    my $cmd = $self->command;
    my @allowed = @{$self->allowed};

    if ((!$cmd) and (!@allowed)) {
        say STDERR "supply either -allowed or -command or both";
        return 1;
    }

    my $query = SSH::PublicKey->new(val => $self->public_key->slurp);
    $self->_fetch_by_public_key($query, 0)
        ->map(
        sub {
            my ($user) = $self->_filename_divide($_);
            $self->username($user) unless $self->username;
            my $moved = $_->move_to($_->dirname->child($self->_generate_filename));
            say "renamed: $_ to $moved" if "$_" ne "$moved";
            return [ $moved, SSH::PublicKey->new(val => $moved->slurp) ];
        })
        ->each(
        sub {
            my ($e, $n) = (shift, shift);
            my ($file, $key) = @$e;
            $cmd ||= $key->command;
            if (0 == length($cmd)) {
                say STDERR "no command to update $file";
                return;
            }

            say "updating: $file";
            my @cmd = split(/\s/, $cmd, 2);
            $cmd[1] = "@allowed" if @allowed;
            $key->command("@cmd")
                ->comment(sprintf 'passphraseless key `%s`', $self->reason)
                ->no_pty(1)->no_port_forwarding(1)->no_X11_forwarding(1)
                ->no_agent_forwarding(1);
            $file->spurt($key->render);
            $updated++;
        });

    return $updated ? 0 : 2;
}

# delete
subcommand delete => 'delete files based on a predicate' => sub {
    option file => 'public_key' => 'path to public key file', isa => 'Mojo::File';
    option str  => 'username'   => q{remove all of a user's keys};
};

sub command_delete {
    my $self = shift;
    my $results = c();
    if ($self->public_key) {
        my $query = SSH::PublicKey->new(val => $self->public_key->slurp);
        push @$results, $self->_fetch_by_public_key($query, 0)->each;
    }
    if (my $user = $self->username) {
        push @$results, $self->_fetch_by_user($user)->each;
    }
    $results->uniq->each(
        sub {
            say "deleting: $_";
            1 == unlink $_ or say STDERR "did not delete '$_': $!";
        });
    return 0;
}

subcommand install => 'install keys from key dir to authorized_keys' => sub {
    option file => 'authorized_keys' => 'path to authorized_keys file to install into', (
        required => 1,
        isa => 'Mojo::File'
    );
};

sub command_install {
    my ($self, $installed, $original, $orig_no_command, $database) = (shift, 0, 0, 0, 0);

    -e $self->authorized_keys and -r _ or do {
        say STDERR "file does not exist ", $self->authorized_keys;
        return 1;
    };

    my $keys = c(split /\r?\n/, $self->authorized_keys->slurp)
        ->grep(qr/^\S+/)
        ->map(
        sub {
            $original++;
            SSH::PublicKey->new(val => $_);
        })
        ->grep(
        sub {
            $orig_no_command++ if $_->command;
            $_->command ? 0 : 1;
        });

    push @$keys, $self->key_files->map(
        sub {
            $database++;
            SSH::PublicKey->new(val => $_->slurp);
        })->each;

    my $mem = Mojo::Asset::Memory->new();
    $keys->each(
        sub {
            $installed++;
            $mem->add_chunk($_->render);
        });
    $mem->move_to($self->authorized_keys);

    my $retval = 0;
    say "wrote: ", $self->authorized_keys;
    say "installed: $installed, original: $original ($orig_no_command), database: $database";
    if (($orig_no_command + $database) != $installed) {
        $retval = 1;
        say STDERR "bad install count";
    }

    return $retval;
}

sub _fetch_by_public_key {
    my ($self, $query, $debug) = @_;
    return $self->key_files
        ->grep(
        sub {
            my $key = SSH::PublicKey->new(val => $_->slurp);
            if ($debug) {
                warn "testing $_\n";
                warn "query key: ", $query->key, "\n";
                warn "file key : ", $key->key, "\n";
                warn "match: ", ($key->key eq $query->key ? 1 : 0), "\n";
            }
            return $key->key eq $query->key;
        });
}

sub _fetch_by_user {
    my ($self, $user) = @_;
    return $self->key_files
        ->grep(sub { return $_->basename =~ qr/^$user\./; });
}

sub _filename_divide {
    my ($self, $mfile) = @_;
    return (split /\./, $mfile->basename)[0,1];
}

sub _generate_filename {
    my ($self) = @_;
    (my $reason   = $self->reason)   =~ s/\s|\./_/g;
    (my $username = $self->username) =~ s/\s|\./_/g;
    return sprintf '%s.%s.authorized_keys', $username, $reason;
}

app {
    my $self = shift;

    $self->_script->print_help;

    return 0;
};

=pod

=head1 NAME

key-db - a file based ssh public key database

=begin html 

<!-- Travis-CI.org -->
<a href="https://travis-ci.org/kiwiroy/ssh-key-db">
  <img src="https://travis-ci.org/kiwiroy/ssh-key-db.svg?branch=master">
</a>
<!-- Coveralls.io -->
<!-- suffering https://groups.google.com/forum/#!topic/perl.qa/OzlK96Plqeg ? -->
<a href='https://coveralls.io/github/kiwiroy/ssh-key-db?branch=master'>
  <img src='https://coveralls.io/repos/github/kiwiroy/ssh-key-db/badge.svg?branch=master'
       alt='Coverage Status' />
</a>
<!-- Kritika.io -->
<a href="https://kritika.io/users/kiwiroy/repos/5759845703012386/heads/master/">
  <img src="https://kritika.io/users/kiwiroy/repos/5759845703012386/heads/master/status.svg"
       alt="Kritika Analysis Status" />
</a>

=end html

=for test_synopsis BEGIN { die "SKIP: skip this pod, it's horrible!\n"; }

=head1 DESCRIPTION

Manage a directory of public keys for installation into a L<authorized_keys|https://man.openbsd.org/ssh#FILES> file.

The public keys are keys that require restriction of some kind. The general application is to limit to a command that
can be run of a server.

=head1 SYNOPSIS

Examples:

  key-db add -key-dir keys -public-key foo_id_rsa.pub -user foo -command /sbin/nologin -reason safety
  key-db add -key-dir keys -public-key bar_id_rsa.pub -user bar -command /sbin/nologin -reason safety
  key-db add -key-dir keys -public-key baz_id_rsa.pub -user baz -command /sbin/nologin -reason safety

  key-db list -key-dir keys

  key-db update -key-dir keys -user foo -command /sbin/only -allowed ps -reason trusted

  key-db delete -key-dir keys -user baz

  key-db install -key-dir keys -authorized-keys ~/.ssh/authorized_keys

  key-db add --help

=head1 COMMANDS

This a commands based script where the desired operation is passed to the script as the first parameter at the
command line.

=head2 add

Add a public key to the C<-key-dir> directory with the appropriate restrictions in place.

=head2 list

List the keys in the C<-key-dir> directory.

=head2 update

Update a current key with new information.

=head2 install

Install all the keys from the C<-key-dir> into the C<-authorized-keys> file.

=head1 SEE ALSO

=over 4

=item L<authorized_keys|https://man.openbsd.org/ssh#FILES>

=item L<authorized_keys file format|https://man.openbsd.org/sshd.8#AUTHORIZED_KEYS_FILE_FORMAT>

=item L<AuthorizedKeysCommand|https://man.openbsd.org/sshd_config#AuthorizedKeysCommand>

=back

=cut
